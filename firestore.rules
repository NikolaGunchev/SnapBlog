rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    match /users/{userId} {
      allow read: if request.auth.uid != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId
                    && request.resource.data.email == resource.data.email;
    }
    
     match /posts/{postId} {
      // Allow anyone to read all posts.
      allow read: if true;

      // A post can be created if the user is logged in, and the new post's userId matches their UID.
      allow create: if request.auth.uid != null 
                    && request.resource.data.userId == request.auth.uid;

      // A post can be updated or deleted only by the user who created it.
      // The `resource.data.userId` refers to the userId of the existing document.
      allow update, delete: if request.auth.uid != null 
                            && resource.data.userId == request.auth.uid
                            // You can add additional checks here, e.g., to prevent changing the userId
                            && request.resource.data.userId == resource.data.userId;
    }
    
    match /groups/{groupId} {
      // Allow anyone to read all group data.
      allow read: if true;

      // A group can be created if the user is authenticated.
      // We assume the user's ID is stored as the 'creatorId' on the group document.
      allow create: if request.auth.uid != null;
      
      // A group can be updated or deleted only by its creator.
      // The `resource.data.creatorId` refers to the creatorId of the existing document.
      allow update, delete: if request.auth.uid != null 
                            && resource.data.creatorId == request.auth.uid;
    }
    
    match /posts/{postId}/comments/{commentId} {
      // Allow anyone to read all group data.
      allow read: if true;

      // A comment can be created if the user is authenticated.
      // We assume the user's ID is stored as the 'creatorId' on the group document.
      allow create: if request.auth.uid != null;
      
      // A comment can be updated or deleted only by its creator.
      // The `resource.data.creatorId` refers to the creatorId of the existing document.
      allow update, delete: if request.auth.uid != null 
                            && resource.data.creatorId == request.auth.uid;
    }
    
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2025, 8, 4);
    }
  }
}